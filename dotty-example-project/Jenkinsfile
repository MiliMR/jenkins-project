pipeline {
    agent any
    stages {
        /*stage('Compile') {
            steps {
                dir('dotty-example-project'){
                    sh 'sbt clean compile'
                }
            }
        }*/
        stage('Dependencies Check') {
            steps {
                dir('dotty-example-project'){
                    sh 'sbt dependencyCheck'
                    archiveArtifacts artifacts: '**/target/scala-0.24/dependency-check-report.xml', fingerprint: true, onlyIfSuccessful: true
                    //dependencyCheckPublisher pattern: 'tarjet/scala-0.24/dependency-check-report.xml'
                }
            }
        }
        /*stage('Analysis Of Dependency Check Report') {
            steps {
                dir('dotty-example-project/utils'){
                    sh 'ls'
                    sh 'npm install'
                    sh 'npm test'
                }
            }
        }*/
    }
    post{
        success{
            script {
                // XmlParser may kick off about xml prolog if you dont read xml into string
                def tests = new XmlParser().parse('**/target/scala-0.24/dependency-check-report.xml')
                println tests.scm.locations[0].children()[0].remote.text()
            }
        }
    }
}
