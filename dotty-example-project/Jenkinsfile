/*pipeline {
    agent {
  */      node {
            def scmVars

            stage('build') {

              // Use Maven Tool
              scmVars = checkout scm

              // Run Build

            }

            stage('Deploy') {

              def environment = "Prod"
              def description = "Deploying my branch"
              def ref = scmVars.GIT_COMMIT
              def owner = "MiliMR"
              def repo = "jenkins-project"
              def deployURL = "https://api.github.com/repos/${owner}/${repo}/deployments"
              def deployBody = '{"ref": "' + ref +'","environment": "' + environment  +'","description": "' + description + '"}'

              // Create new Deployment using the GitHub Deployment API
              def response = httpRequest authentication: 'MiliMR-7eef6863b0b974122f434f47f853692b85dee3c0', httpMode: 'POST', requestBody: deployBody, responseHandle: 'STRING', url: deployURL
              if(response.status != 201) {
                  error("Deployment API Create Failed: " + response.status)
              }

              // Get the ID of the GitHub Deployment just created
              def responseJson = readJSON text: response.content
              def id = responseJson.id
              if(id == "") {
                  error("Could not extract id from Deployment response")
              }

              // Execute Deployment
              def deployStatus = sh returnStatus: true, script: 'echo deploy'

              // Record new Deployment Status based on output
              def result = (deployStatus) ? 'failure' : 'success'
              def deployStatusBody = '{"state": "' + result + '","target_url": "http://github.com/deploymentlogs"}'
              def deployStatusURL = "https://api.github.com/repos/${owner}/${repo}/deployments/${id}/statuses"
              def deployStatusResponse = httpRequest authentication: 'MiliMR-7eef6863b0b974122f434f47f853692b85dee3c0', httpMode: 'POST', requestBody: deployStatusBody , responseHandle: 'STRING', url: deployStatusURL
              if(deployStatusResponse.status != 201) {
                error("Deployment Status API Update Failed: " + deployStatusResponse.status)
              }
           }
        }/*
    }
    stages {
        stage('Compile') {
            steps {
                dir('dotty-example-project'){
                    sh 'pwd'
                    sh 'sbt clean compile'
                }
            }
        }
        stage('Create Result Dir') {
            steps {
                dir('dotty-example-project'){
                    sh 'rm -rf build/owasp'
                    sh 'mkdir -p build/owasp'
                }
            }
        }
        stage('Dependencies Check') {
            steps {
                dir('dotty-example-project'){
                    //sh 'sbt dependencyCheck'
                    dependencycheck additionalArguments: '--project dotty-example-project --scan . --out build/owasp/dependency-check-report.xml --format XML --noupdate', odcInstallation: 'Dependency Checker'
                    sh 'ls -alh build/owasp'
                    dependencyCheckPublisher pattern: 'build/owasp/dependency-check-report.xml' 
                    
                }
            }
        }

    }
}
*/
